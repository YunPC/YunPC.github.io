<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rabbit blog</title>
    <link>http://yunpc.github.io/</link>
    
    <atom:link href="http://yunpc.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 12 Sep 2021 14:56:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Next.js 핵심개념</title>
      <link>http://yunpc.github.io/2021/09/12/next-js/</link>
      <guid>http://yunpc.github.io/2021/09/12/next-js/</guid>
      <pubDate>Sun, 12 Sep 2021 14:49:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;주요 장점&lt;/p&gt;
&lt;p&gt;SSR+CSR의 혼합 사용&lt;/p&gt;
&lt;p&gt;파일 베이스 라우팅&lt;/p&gt;
&lt;p&gt;기존 리액트의 경우 url을 변경하지만 서버에 요청을 보내진 않는다. (SPA)&lt;/p&gt;
&lt;p&gt;리액트 라우터는 이를 제공해주긴 하지만 컴포넌트에 계속 R</description>
        
      
      
      
      <content:encoded><![CDATA[<p>주요 장점</p><p>SSR+CSR의 혼합 사용</p><p>파일 베이스 라우팅</p><p>기존 리액트의 경우 url을 변경하지만 서버에 요청을 보내진 않는다. (SPA)</p><p>리액트 라우터는 이를 제공해주긴 하지만 컴포넌트에 계속 Router를 감싸줘야하고 이는 다른 페이지에도 동일한 코드를 계속 넣어줘야한다.</p><p>코드 대신 페이지와 루트 정의를 폴더와 파일로 한다. 이로 인해 코드가 줄고 라우팅의 의미를 더 명료하게 나타낼 수 있다. 중첩 라우트, 동적 라우트 지원</p><p>백엔드 코드를 쉽게 넣을 수 있다.</p><p>Next.js 실전 체험</p><p>☝️이 체험은 Next.js 공식문서에 따른 튜토리얼입니다. 초기 구성은 <span class="exturl" data-url="aHR0cHM6Ly9uZXh0anMub3JnL2xlYXJuL2Jhc2ljcy9jcmVhdGUtbmV4dGpzLWFwcA==">문서<i class="fa fa-external-link-alt"></i></span>에서 확인해주세요</p><h2 id="next.js의-페이지">Next.js의 페이지</h2><p>pages 밑에 posts라는 파일을 생성합니다. 이 아래에 firstpost.js를 아래와 같이 입력합니다.</p><center><img src="/images/Nextjs/nextTree.png" alt="Nextjs 계층구조" width="400" height="300"></center><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">FirstPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>First Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 아래와 같이 라우팅이 된 것을 확인할 수 있습니다</p><center><img src="/images/Nextjs/firstPost.png" alt="firstPost로 라우팅되는 모습" width="400" height="300"></center><h2 id="링크-컴포넌트">링크 컴포넌트</h2><p>링크 컴포넌트를 통해 페이지를 이동할 수 있는 링크를 달아줍니다.</p><p>import Link from 'next/link'를 하고 아래에 링크 컴포넌트를 만듭니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line">/.../</span><br><span class="line"></span><br><span class="line">&lt;h1 className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">  Read&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  &lt;Link href=<span class="string">&quot;/posts/first-post&quot;</span>&gt;</span><br><span class="line">    &lt;a&gt;<span class="built_in">this</span> page!&lt;/a&gt;</span><br><span class="line">  &lt;/Link&gt;</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>이제 폴더 ./posts/first-post로 가서 되돌아가는 컴포넌트를 추가합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">FirstPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;h1&gt;First Post&lt;/h1&gt;</span><br><span class="line">            &lt;h2&gt;</span><br><span class="line">                &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    &lt;a&gt;Back to home&lt;/a&gt;</span><br><span class="line">                &lt;/Link&gt;</span><br><span class="line">            &lt;/h2&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그럼 아래와 같이 라우팅이 잘 동작하는 것을 볼 수 있습니다.</p><center><img src="/images/Nextjs/next.gif" alt="라우팅 동작" width="400" height="300"></center><h2 id="클라이언트-사이드-탐색">클라이언트 사이드 탐색</h2><p>링크 컴포넌트는 같은 Next.js 앱에서 클라이언트 사이드 탐색이 가능합니다.</p><p>클라이언트 사이드 탐색이란 브라우저 탐색보다 빠른 자바스크립트를 사용하여 페이지 전환을 일으키는 것을 말합니다. 이를 확인하기 위해선 개발자 도구에서 배경색상을 노란색으로 하고 라우팅시 변경되지 않으면 클라이언트 사이드 탐색입니다.</p><p>이를 사용하고 싶지 않다면 Link 태그를 쓰지 않고 a태그만을 이용하여 해결할 수 있습니다.</p><h2 id="메타데이터">메타데이터</h2><p>메타데이터 수정을 위해선 Head컴포넌트를 사용합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">FirstPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;Head&gt;</span><br><span class="line">                &lt;title&gt;First Post&lt;/title&gt;</span><br><span class="line">            &lt;/Head&gt;</span><br><span class="line">            &lt;h1&gt;First Post&lt;/h1&gt;</span><br><span class="line">            &lt;h2&gt;</span><br><span class="line">                &lt;Link href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    &lt;a &gt;Back to home&lt;/a&gt;</span><br><span class="line">                    &lt;/Link&gt;</span><br><span class="line">            &lt;/h2&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 Head를 통해 메타데이터를 수정할 수 있습니다.</p>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/Next-js/">Next.js</category>
      
      
      <comments>http://yunpc.github.io/2021/09/12/next-js/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>타입스크립트 핵심 문법</title>
      <link>http://yunpc.github.io/2021/09/12/typescript-check/</link>
      <guid>http://yunpc.github.io/2021/09/12/typescript-check/</guid>
      <pubDate>Sun, 12 Sep 2021 14:48:01 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;타입스크립트-설치&quot;&gt;타입스크립트 설치&lt;/h2&gt;
&lt;p&gt;다음 명령어를 통해 타입스크립트를 설치할 수 있습니다&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="타입스크립트-설치">타입스크립트 설치</h2><p>다음 명령어를 통해 타입스크립트를 설치할 수 있습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h2 id="타입스크립트-코드-작성greeter.ts">타입스크립트 코드 작성(greeter.ts)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function greeter(person) &#123;</span><br><span class="line">    return &quot;Hello, &quot; + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user &#x3D; &quot;Jane User&quot;;</span><br><span class="line"></span><br><span class="line">document.body.textContent &#x3D; greeter(user);</span><br></pre></td></tr></table></figure><blockquote><p>💡 확장자가 .ts이지만 아직 평범한 자바스크립트 파일입니다.</p></blockquote><h2 id="코드-컴파일">코드 컴파일</h2><p>아래 명령어를 터미널에 입력하세요</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.js</span><br></pre></td></tr></table></figure><p>이 결과로 나오는 코드는 greeter.js입니다. 이제 typescript를 사용할 수 있습니다!</p><p>타입스크립트는 말그대로 타입을 표기할 수 있습니다. <code>: string</code>과 같이 콜론 뒤에 정하고자 하는 타입을 지정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function greeter(person: string) &#123;</span><br><span class="line">    return &quot;Hello, &quot; + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user &#x3D; &quot;Jane User&quot;;</span><br><span class="line"></span><br><span class="line">document.body.textContent &#x3D; greeter(user);</span><br></pre></td></tr></table></figure><p>여기서 인수가 개수나 형식이 잘못되어도 컴파일은 되지만, 코드가 예상대로 동작하지 않을수도 있습니다.</p><h2 id="인터페이스">인터페이스</h2><p>타입스크립트에서는 새로운 타입을 정의할 수도 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greeter(person: Person) &#123;</span><br><span class="line">    return &quot;Hello, &quot; + person.firstName + &quot; &quot; + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user &#x3D; &#123; firstName: &quot;Jane&quot;, lastName: &quot;User&quot; &#125;;</span><br><span class="line"></span><br><span class="line">document.body.textContent &#x3D; greeter(user);</span><br></pre></td></tr></table></figure><h2 id="클래스">클래스</h2><p>인터페이스를 통한 추상화가 가능합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">    fullName: string;</span><br><span class="line">    constructor(public firstName: string, public middleInitial: string, public lastName: string) &#123;</span><br><span class="line">        this.fullName &#x3D; firstName + &quot; &quot; + middleInitial + &quot; &quot; + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function greeter(person: Person) &#123;</span><br><span class="line">    return &quot;Hello, &quot; + person.firstName + &quot; &quot; + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let user &#x3D; new Student(&quot;Jane&quot;, &quot;M.&quot;, &quot;User&quot;);</span><br><span class="line"></span><br><span class="line">document.body.textContent &#x3D; greeter(user);</span><br></pre></td></tr></table></figure><blockquote><p>💡 생성자 인수의 <code>public</code>을 사용하면 그 인수의 이름으로 프로퍼티를 자동생성합니다.</p></blockquote>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/Typescript/">Typescript</category>
      
      
      <comments>http://yunpc.github.io/2021/09/12/typescript-check/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode 유용한 확장 TabOut</title>
      <link>http://yunpc.github.io/2021/08/31/tabout/</link>
      <guid>http://yunpc.github.io/2021/08/31/tabout/</guid>
      <pubDate>Tue, 31 Aug 2021 03:19:50 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;vs의 유용한 확장을 소개하고자 합니다.🧐 보통 코드나 중괄호에서 코드를 다 작성하였을 때, 괄호문에서 탈출하기 위해 클릭이나 다른 키보드의 조합을 통해 빠져나가야 합니다. 이를 탭키 하나로 간단히 처리할 수 있습니다.🤩&lt;/p&gt;
&lt;p&gt;예를 들</description>
        
      
      
      
      <content:encoded><![CDATA[<p>vs의 유용한 확장을 소개하고자 합니다.🧐 보통 코드나 중괄호에서 코드를 다 작성하였을 때, 괄호문에서 탈출하기 위해 클릭이나 다른 키보드의 조합을 통해 빠져나가야 합니다. 이를 탭키 하나로 간단히 처리할 수 있습니다.🤩</p><p>예를 들어 배열을 작성한다고 했을 때 배열 안에서 탭키를 쳤을 때 마주하는 모습은 아래와 같습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;cursurRightHere&#x27;</span>]</span><br></pre></td></tr></table></figure><p>TabOut 확장 프로그램을 깔면 다음과 같이 동작합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="string">&#x27;cursurRightHere&#x27;</span></span><br></pre></td></tr></table></figure><p>실제 확장 프로그램을 설치한 뒤, 사용해보니 여러줄에 걸쳐있는 괄호문에는 동작하지 않으니 유의하세요.🤫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"><span class="string">&#x27;cursor1&#x27;</span>bar</span>)&#x27;<span class="title">cursor2</span>&#x27; </span>&#123;<span class="string">&#x27;cursor3&#x27;</span>  <span class="string">&#x27;cursor4&#x27;</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉 괄호의 짝이 한 줄에 있는 경우 TabOut이 동작하지만 그렇지 않은 경우 원래의 Tab역할을 합니다.</p><p>중첩괄호에서도 있어도 동작하니 코드 작성할 때 유용하게 사용할 수 있을 것 같습니다. 모두 즐거운 코딩하세요!🤜🤜🤜</p>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/VScode/">VScode</category>
      
      <category domain="http://yunpc.github.io/tags/Extension/">Extension</category>
      
      
      <comments>http://yunpc.github.io/2021/08/31/tabout/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>자바스크립트 이벤트 루프와 콜 스택</title>
      <link>http://yunpc.github.io/2021/08/30/javascript-event-loop-and-call-stack/</link>
      <guid>http://yunpc.github.io/2021/08/30/javascript-event-loop-and-call-stack/</guid>
      <pubDate>Mon, 30 Aug 2021 04:40:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글은 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9mZWxpeGdlcnNjaGF1LmNvbS9qYXZhc2NyaXB0LWV2ZW50LWxvb3AtY2FsbC1zdGFjay8/cmVmPWZnLW5ld3NsZXR0Z</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글은 <span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGdlcnNjaGF1LmNvbS9qYXZhc2NyaXB0LWV2ZW50LWxvb3AtY2FsbC1zdGFjay8/cmVmPWZnLW5ld3NsZXR0ZXItY29uZmlybWF0aW9uI2hvdy1qYXZhc2NyaXB0LXdvcmtzLWluLXRoZS1icm93c2Vy">원문<i class="fa fa-external-link-alt"></i></span>을 바탕으로 쓴 글입니다.</p><p>이 글의 목적은 브라우저에서 자바스크립트가 어떻게 동작하는지 알려주는 것입니다.</p><h2 id="자바스크립의-브라우저-동작-과정">자바스크립의 브라우저 동작 과정</h2><p>각 토픽으로 들어가기 전에, 대략적인 개요를 보여주겠습니다. 이 개요엔 자바스크립트가 어떻게 브라우저와 동작하는 지 보여주고 있습니다.</p><p><br></p><center><img src="/images/JavaScript/js-with-browser.png" alt="JS 경계선 안의 힙과 콜스택 화살표가 Web APIs를 향해 있다. Web APIs 안에 DOM, AJAX, Timeout이 있다. 콜백 큐로 향하는 화살표가 있고 이 안에는 콜백 함수들(onClick, onDone, onLoad)존재, 이벤트 루프 화살표가 이 세 영역 사이를 돌고 있고 콜스택 큐에서 JS 경계선으로 화살표가 이어져있음." width="400" height="300"></center><p><br></p><h2 id="콜-스택">콜 스택</h2><p>자바스크립트가 싱글 스레드라는 말은 들어봤을 수 있습니다. 하지만 싱글 스레드의 진짜 의미는 무엇일까요?</p><p>자바스크립트에는 콜스택이 하나만 존재하기 때문에 한번에 하나씩 할 수 있습니다.</p><p>콜 스택은 자바스크립트가 함수의 호출지를 찾아갈 수 있도록 하는 매커니즘입니다.</p><p>스크립트나 함수가 함수를 호출하면, 이 함수가 콜 스택의 가장 위에 쌓입니다. 함수가 종료되면 인터프리터가 콜스택에서 이를 다시 제거합니다.</p><p>함수가 종료되는 경우는 <code>return</code>문을 만나거나 스코프의 끝에 다다랐을 경우입니다.</p><p>콜스택은 가장 상단에 쌓이기 때문에 <code>LIFO(Last In, First Out)</code>특성을 가집니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addOne = <span class="function">(<span class="params">value</span>) =&gt;</span> value + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> addTwo = <span class="function">(<span class="params">value</span>) =&gt;</span> addOne(value + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> addThree = <span class="function">(<span class="params">value</span>) =&gt;</span> addTwo(value + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> calculation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> addThree(<span class="number">1</span>) + addTwo(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">calculation();</span><br></pre></td></tr></table></figure><p>만약 위와 같은 코드를 실행시킨다고 하면 다음과 같은 과정을 따릅니다.</p><ol type="1"><li>파일이 로드되고 <code>main</code>함수가 실행됩니다. 이 <code>main</code>함수는 전체 파일을 실행시킨다는 것을 의미합니다. 이 함수가 콜 스택에 추가됩니다.</li><li><code>main</code>은 <code>calculation()</code>을 호출하고 콜 스택에 쌓입니다.</li><li><code>calculation()</code>은 <code>addThree()</code>를 호출합니다. 그리고 이 함수는 콜스택에 쌓입니다.</li><li><code>addThree</code>는 <code>addTwo</code>를 호출합니다. 이 함수도 콜스택에 쌓입니다.</li><li><code>addOne</code>도 위와 동일한 과정을 거칩니다.</li><li><code>addOne</code>이 다른 함수를 호출하지 않기 때문에 함수가 종료되면 콜 스택에서 제거됩니다.</li><li><code>addOne</code>이 종료됨에 따라 <code>addTwo</code>도 종료되고 콜스택에서 사라집니다.</li><li>마찬가지로 <code>addThree</code>도 종료됩니다.</li><li><code>calculation</code>에서 <code>addTwo</code>를 부르게 되고 콜스택에 추가됩니다.</li><li><code>addTwo</code>는 <code>addOne</code>을 호출하고 콜 스택에 쌓입니다.</li><li><code>addOne</code>이 콜 스택에서 제거됩니다.</li><li><code>addTwo</code>가 콜 스택에서 제거됩니다.</li><li><code>addThree</code>와 <code>addTwo</code>가 모두 평가되었으므로 <code>calculation</code>은 결과값을 계산할 수 있다. <code>calculation</code>이 콜 스택에서 제거됩니다.</li><li>더 이상 존재하는 코드가 없기 때문에 <code>main</code>도 콜 스택에서 제거됩니다.</li></ol><blockquote><p>이 글에서 <code>main</code>이라 작성하긴 했지만 공식적으로 이에 대한 이름은 존재하지 않습니다. 브라우저 콘솔에서는 이 함수를 <code>anonymous</code>라 부릅니다.</p></blockquote><h3 id="uncaught-rangeerror-maximum-call-stack-size-exceeded">Uncaught RangeError: Maximum call stack size exceeded</h3><p><br></p><center lang="en"><img src="/images/JavaScript/uncaught-rangeError.png" alt="Uncaught RangeError: Maximum call stack size, exceeded at b (<anonymous>:6:5) exceeded at a (<anonymous>:2:5)" width="400" height="300"></center><p><br></p><p>이 에러 메시지에 따르면, 서로 순환 호출을 하기 때문에 콜스택의 적재 횟수를 초과하여서 생긴 에러입니다. <span class="exturl" data-url="aHR0cHM6Ly8yYWxpdHkuY29tLzIwMTQvMDQvY2FsbC1zdGFjay1zaXplLmh0bWw=">최대 콜 스택의 범위는 최소 만 부터 5만까지이다.<i class="fa fa-external-link-alt"></i></span> 따라서 이 에러가 발생한 경우에는 코드가 무한 루프에 빠지고 있습니다.</p><blockquote><p>요약하자면 콜 스택은 함수의 호출지를 추적할 수 있도록 하고 LIFO(Last In, First Out) 특성을 가지고 있습니다. 다시 말해서 스택의 가장 상단에 있는 부분이 먼저 실행됩니다.</p></blockquote><h2 id="heap">Heap</h2><p>자바스크립트의 힙은 함수나 변수를 정의할 때 객체가 정의되는 곳입니다. 이 주제는 콜 스택이나 이벤트 루프와 관련은 없지만, 자바스크립트의 메모리 할당과 관련하여 알고 싶은 사람은 이 <span class="exturl" data-url="aHR0cHM6Ly9mZWxpeGdlcnNjaGF1LmNvbS9qYXZhc2NyaXB0LW1lbW9yeS1tYW5hZ2VtZW50Lw==">링크<i class="fa fa-external-link-alt"></i></span>를 참고하길 바랍니다.</p><h2 id="web-apis">Web APIs</h2><p>자바스크립트는 싱글 스레드 기반이지만 브라우저와 동시에 실행될 수 있습니다. 이유는 브라우저가 제공하는 Web API가 있기 때문입니다.</p><p>예를 들어, 자바스크립트 인터프리터를 통해 코드를 실행시키기 위해서는 서버에서 이에 대한 응답을 받아야만 합니다. 이 때문에 웹 애플리케이션의 사용이 불가능할 수 있습니다.</p><p>이에 대한 해결책으로 웹 브라우저가 자바사크립트 코드에서 실행시킬 수 있는 API를 제공합니다. 이를 실행하는 건 브라우저가 실행합니다. 이 때문에 콜스택을 막지 않습니다.</p><p>web APIs의 또다른 장점으로는 C와 같은 낮은 레벨의 코드로 쓰여진 점입니다. 따라서 자바스크립트만으로 하기 어려운 일들을 해줄 수 있습니다.</p><p>이들은 AJAX 요청이나 DOM관리를 할 수 있습니다. 이뿐만 아니라, geo-tracking, 로컬 스토리지 접근 등이 가능합니다.</p><h2 id="콜백-큐">콜백 큐</h2><p>web APIs의 특성 덕분에 자바스크립트 인터프리터 밖에서도 무언가를 할 수 있습니다. 하지만 예를 들어 Web API나 AJAX 요청에 대한 응답에 대해 처리를 자바스크립트로 하고 싶다면 어떻게 해야할까요?</p><p>이 때문에 콜백이 등장합니다. 이들을 활용해서, web API가 API 실행 뒤에 코드를 실행시킬 수 있습니다.</p><blockquote><p><strong>콜백이 무엇인가요?</strong> 콜백이란 다른 함수에 전해지는 함수를 말합니다. 콜백은 보통 어떤 코드가 실행된 이후에 실행됩니다. 함수를 매개변수로 해서 쉽게 콜백 함수를 만들 수 있습니다. 이들은 고차함수라고 불리기도 합니다. 콜백은 기본적으로 비동기가 아닌걸 기억하세요!</p></blockquote><p>예제를 살펴봅시다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>), <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> c = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line">b();</span><br><span class="line">c();</span><br></pre></td></tr></table></figure><p>이미 나올 값을 알고 있는 사람도 있을 겁니다.</p><p><code>setTimeout</code>이 실행될 동안 JS 인터프리터도 다음 구문을 해석해 나갑니다. 만약 setTimeout에서 설정된 시간이 지나고 콜 스택이 전부 비게 되면 <code>setTimeout</code>의 인자로 넘긴 콜백 함수가 실행됩니다.</p><p>따라서 결과는 <code>a c b</code>가 됩니다.</p><p><code>setTimeout</code>가 종료되더라도 콜백 함수는 바로 실행되지 않습니다. 이 이유는 자바스크립트가 한번에 하나의 일만 하기 때문입니다.</p><p>자바스크립트로 작성된 콜백함수는 <code>setTimeout</code>의 인수로 전해집니다. 그러므로 자바스크립트 인터프리터가 이를 해석(=콜스택에 추가)해야 합니다. 이를 다시 말하면, 콜백을 실행하기 위해서는 콜 스택이 전부 빌 때까지 기다려야 합니다.</p><p><code>setTimeout</code>이 web APIs를 부릅니다. API는 콜백을 콜백 큐로 이동시켜줍니다. 그리고 이벤트 루프가 콜 스택이 빌 때 콜백 큐에서 콜 스택으로 콜백 함수를 추가합니다.</p><p>콜 스택과 달리 콜백 큐는 FIFO(First In, First Out)를 따릅니다. 이는 큐에 쌓인 순서대로 실행되는 것을 의미합니다.</p><h2 id="이벤트-루프">이벤트 루프</h2><p>자바스크립트 이벤트 루프는 콜 스택이 빌 때, 콜백 큐에 있는 가장 첫번째 일을 콜 스택에 추가합니다.</p><p>다르게 말하자면 콜 스택이 비지 않는 한, 콜백 큐에 있는 어떠한 일도 실행되지 않습니다.</p><p>따라서 너무 많은 코드를 실행시키거나 콜백 큐를 가로막으면, 새로운 자바스크립트 코드가 실행되지 못하기 때문에 웹 사이트가 반응하지 않을 수 있습니다.</p><p><code>onscroll</code>과 같은 이벤트 헨들러들은 이벤트가 실행될 때, 콜백 큐에 일들을 추가합니다. 이 때문에 이러한 콜백들엔 디바운스가 필요합니다. 디바운스란 매 x밀리초마다 실행되도록 하는 것입니다.</p><blockquote><p><strong>실제로 해보세요</strong> 이 코드를 브라우저 콘솔에 입력해보세요. 스크롤시 얼마나 많은 콜백이 나오는지 관찰해보세요.</p></blockquote><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onscroll = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;scroll&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="settimeoutfn-0">setTimeout(fn, 0)</h2><p>위처럼 코드를 작성하는 것의 이점은 메인 스레드를 오랫동안 막아두지 않으면서 어떠한 일을 할 수 있는 것입니다.</p><p>비동기 코드를 콜백에 넣고 <code>setTimeout</code>을 0ms로 지정하면 브라우저가 콜백 실행을 하기 전에 DOM업데이트와 같은 작업을 수행할 수 있습니다.</p><h2 id="잡job-큐와-비동기-코드">잡(job) 큐와 비동기 코드</h2><p>콜백 큐에 더불어 프로미스들을 독립적으로 관리하는 큐가 있는데, 그것이 바로 잡 큐입니다.</p><h3 id="프로미스">프로미스</h3><p>프로미스는 EcmaScript 2015 (or ES6)에서 처음 소개되었습니다. 바벨을 통해 사양을 낮출 수도 있습니다.</p><p>프로미스는 콜백 대신 비동기 코드를 관리할 수 있는 방법입니다. 프로미스를 통해 비동기 함수를 체이닝 함으로써 콜백헬이나 운명의 피라미드에 빠지는 것을 방지할 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Print this and wait&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Do something else and wait&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>이런식으로 코드를 작성하게 되면 옆구리가 점점 더 들어가버릴거에요😞</p><p>프로미스를 활용하면 가독성을 더 높일 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A promise wrapper for setTimeout</span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function">(<span class="params">time</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line">timeout(<span class="number">1000</span>)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi after 1 second&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi after 2 seconds&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>여기서 <code>async</code>/<code>await</code>를 활용하면 더 가독성이 좋아집니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logDelayedMessages = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hi after 1 second&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hi after 2 seconds&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logDelayedMessages();</span><br></pre></td></tr></table></figure><blockquote><p>여기서는 프로미스의 대략적인 부분만 다뤘기 때문에 더 세부적인 내용이 궁금하신 분은 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==">MDN<i class="fa fa-external-link-alt"></i></span>을 참고하세요</p></blockquote><h3 id="프로미스의-올바른-사용법">프로미스의 올바른 사용법</h3><p>프로미스는 콜백과 다르게 <strong>그들만의 큐를 가지고 있습니다.</strong> 잡 큐는 프로미스 큐라고도 알려져있습니다. 그리고 이 큐는 콜백 큐보다 더 높은 우선 순위를 가지고 있습니다. 따라서 콜백 큐보다 우선적으로 콜 스택에 쌓습니다.</p><p>예시를 보겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;d&#x27;</span>);</span><br></pre></td></tr></table></figure><p>이 예제를 보면 프로미스 큐가 콜백 큐보다 더 높은 우선순위를 가지기 때문에 출력은 <code>a d c b</code>로 출력됩니다.</p>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/JavaScript/">JavaScript</category>
      
      
      <comments>http://yunpc.github.io/2021/08/30/javascript-event-loop-and-call-stack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS Math 함수들 &#39;min, max&#39;</title>
      <link>http://yunpc.github.io/2021/08/29/css-math-functions2/</link>
      <guid>http://yunpc.github.io/2021/08/29/css-math-functions2/</guid>
      <pubDate>Sun, 29 Aug 2021 14:09:29 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글의 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tb2Rlcm5jc3MuZGV2L3ByYWN0aWNhbC11c2VzLW9mLWNzcy1tYXRoLWZ1bmN0aW9ucy1jYWxjLWNsYW1wLW1pbi1tY</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글의 <span class="exturl" data-url="aHR0cHM6Ly9tb2Rlcm5jc3MuZGV2L3ByYWN0aWNhbC11c2VzLW9mLWNzcy1tYXRoLWZ1bmN0aW9ucy1jYWxjLWNsYW1wLW1pbi1tYXgv">원문<i class="fa fa-external-link-alt"></i></span>을 바탕으로 재해석한 글입니다.</p><h2 id="min">min()</h2><blockquote><p>min() 사용 목적: 최댓값의 한계를 설정할 수 있다.</p></blockquote><p><code>width(80ch, 100vw)</code>의 경우 80인치와 뷰포트의 너비를 비교하여 더 작은 값을 선택한다.</p><h3 id="container클래스를-활용한-예제">.container클래스를 활용한 예제</h3><p><code>min()</code>함수 이내에는 계산식을 포함할 수 있다. 따라서 아래와 같이 코드를 작성할 경우, 적절한 좌우 여백을 줄 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">80ch</span>, <span class="number">100vw</span> - <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드의 경우 <code>.container</code>클래스를 가진 요소는 80인치까지 너비를 가질 수 있으며, 뷰포트가 줄어들 경우 양쪽 너비 <code>1rem</code>의 요소를 만들 수 있다.</p><p>다른 예시로는 아래 css 코드를 들 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">40ch</span>, <span class="number">100%</span> - <span class="number">2rem</span>);</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>여기서 <code>ch</code> 단위는 글꼴과 관련된 스타일이 모두 적용된 <code>0</code>의 너비를 이야기한다. 이를 활용하면 한 줄에 들어가는 문자의 수를 가늠할 수 있다. 따라서 어떠한 문서를 읽을 때, 좀 더 나은 경험을 제공할 수 있다.</p></blockquote><p><strong>장점</strong> 미디어 쿼리 없이도 반응형을 제작할 수 있다.</p><h3 id="min을-통한-반응형-요소">min()을 통한 반응형 요소</h3><p>댓글이나 피드옆에 사용자 프로필이 있는 경우를 생각해보자. 만약 이들의 크기가 화면의 크기에 따라 유동적으로 바뀌어야 할 때 <code>min</code>을 활용할 수 있다. <code>min(64px, 15%, 10vw)</code>를 사용하면 이 요소는 <code>min</code>안에 적힌 3개의 값 모두를 넘어서지 못한다.</p><p>이 min함수가 사용된 요소는 <code>64px</code>를 절대 넘어서지 못함과 동시에 최소 <code>15%</code>또는 <code>10vw</code>의 사이즈를 가진다.</p><h3 id="min을-사용한-다른-특성">min()을 사용한 다른 특성</h3><p><code>min()</code>은 <code>background-size</code>에도 활용될 수 있다. 어떠한 배경 이미지가 유동적으로 확장되고자 할 때 이에 대한 경계를 <code>min()</code>이 지정할 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.background-image</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1F1B1C</span> <span class="built_in">url</span>(<span class="string">https://source.unsplash.com/RapCPd_mJTU/800x800</span>) no-repeat center;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="built_in">min</span>(<span class="number">600px</span>, <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 예시를 보면 이미지가 <code>600px</code>을 넘지 않을 것을 보증한다. 그리고 <code>600px</code>보다 작은 경우에는 알아서 크기를 줄인다.</p><h2 id="max">max()</h2><blockquote><p>max는 반응형 요소에서 최소값의 경계를 지정한다.</p></blockquote><p><code>max()</code>의 경우 <code>min()</code>의 반대다.</p><h2 id="max로-문맥상-여백-주기">max()로 문맥상 여백 주기</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1dBSS9XQ0FHMjIvVW5kZXJzdGFuZGluZy9yZWZsb3cuaHRtbA==">Web Content Accessibility Guidelines (WCAG) Success Criterion 1.4.10<i class="fa fa-external-link-alt"></i></span>에 따르면 사이트를 최대 400%까지 확대할 수 있어야한다. 이때 <code>px</code>과 <code>rem</code>은 표준에 맞지 않는 단위이다.</p><p>만약에 <code>1280px</code>사이즈의 데스크톱에 400% 줌을 준다면 뷰포트 너비가 <code>320px</code>로 줄어든다. 이때 모바일에서 이를 한다면, 방향은 가로로 계속 유지된다. 이러한 뷰포트의 축소는 읽기와 상호작용 영역이 감소했음을 의미한다. 더하여 휴대폰에서는 적합한 크기가 확대된 창에서는 훨씬 커보일 수 있다.</p><p>이때 쓸 수 있는 것이 <code>max()</code>이다. 원문의 저자는 작은 여백에는 <code>rem</code>단위를 선호한다. 하지만 영역 간의 큰 여백을 줘야하는 경우에는 아래와 같은 코드를 사용한다. 이렇게 하면 뷰포트에 따라 조정이 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> + <span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="built_in">max</span>(<span class="number">8vh</span>, <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>뷰포트의 너비가 큰 경우 <code>8vh</code>가 쓰이고 그것보다 작거나 확대된 창에서는 <code>2rem</code>이 적용된다.</p><h3 id="max를-활용한-ios-브라우저-자동-줌인-방지">max를 활용한 iOS 브라우저 자동 줌인 방지</h3><p>iOS에선 <code>16px</code>보다 작은 입력창을 가지고 있으면 자동으로 줌인이 된다. 이 떄 아래와 같은 코드를 사용하면 이 문제를 해결 할 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">max</span>(<span class="number">16px</span>, <span class="number">1rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>max()</code>를 통해 어느 값이던 수용할 수 있고, 최소 <code>16px</code>을 유지할 수 있게 된다.</p><h3 id="max를-활용한-포커싱-아웃라인">max()를 활용한 포커싱 아웃라인</h3><p><code>max</code>를 활용하면 포커싱 아웃라인에 대한 상대적인 크기를 설정할 수 있다. 아래 코드를 통해 아웃라인의 최소 너비를 <code>2px</code>로 설정하고, <code>em</code>값에 따라 너비가 상대적으로 조절될 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  --<span class="attribute">outline</span>-size: <span class="built_in">max</span>(<span class="number">2px</span>, <span class="number">0.08em</span>);</span><br><span class="line">  --<span class="attribute">outline-style</span>: solid;</span><br><span class="line">  --<span class="attribute">outline-color</span>: currentColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="built_in">var</span>(--outline-size) <span class="built_in">var</span>(--outline-style) <span class="built_in">var</span>(--outline-color);</span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="built_in">var</span>(--outline-size);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="max와-타겟-사이즈">max()와 타겟 사이즈</h3><p>타겟 사이즈란 말은 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1dBSS9XQ0FHMjIvVW5kZXJzdGFuZGluZy90YXJnZXQtc2l6ZS1lbmhhbmNlZC5odG1s">WCAG Success Criterion (SC) 2.5.5<i class="fa fa-external-link-alt"></i></span>에 나오며 타겟은 포인터 이벤트를 받을 수 있는 것을 말한다. 곧 나올 WCAG 2.2버전에서는 이런 타겟 사이즈를 최소 <code>44px</code>로 설정할 것을 권고한다.</p><p>이 때도 <code>max()</code>를 활용할 수 있다. 만약 프로필을 눌러 프로필 페이지로 이동해야하는 경우 프로필 버튼에 다음과 같은 스타일링을 줄 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon-button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">44px</span>, <span class="number">2em</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">max</span>(<span class="number">44px</span>, <span class="number">2em</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="aspect-ratio의-보완책-max">aspect-ratio의 보완책 max()</h3><p><code>aspect-ratio</code>를 지원하지 않는 브라우저에서 <code>max()</code>에 높이를 지정하는 방식으로 비슷하게 흉내낼 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/* Fallback for `aspect-ratio` of defining a height */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">max</span>(<span class="number">18vh</span>, <span class="number">12rem</span>);</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* When supported, use `aspect-ratio` */</span></span><br><span class="line"><span class="keyword">@supports</span> (<span class="attribute">aspect-ratio</span>: <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    aspect-ratio: <span class="built_in">var</span>(--img-ratio);</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/CSS/">CSS</category>
      
      
      <comments>http://yunpc.github.io/2021/08/29/css-math-functions2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSS Math 함수들 &#39;calc, clamp&#39;</title>
      <link>http://yunpc.github.io/2021/08/25/css-math-functions/</link>
      <guid>http://yunpc.github.io/2021/08/25/css-math-functions/</guid>
      <pubDate>Wed, 25 Aug 2021 05:19:16 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글의 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9tb2Rlcm5jc3MuZGV2L3ByYWN0aWNhbC11c2VzLW9mLWNzcy1tYXRoLWZ1bmN0aW9ucy1jYWxjLWNsYW1wLW1pbi1tY</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글의 <span class="exturl" data-url="aHR0cHM6Ly9tb2Rlcm5jc3MuZGV2L3ByYWN0aWNhbC11c2VzLW9mLWNzcy1tYXRoLWZ1bmN0aW9ucy1jYWxjLWNsYW1wLW1pbi1tYXgv">원문<i class="fa fa-external-link-alt"></i></span>을 바탕으로 재해석한 글입니다.</p><p>CSS에는 수학적으로 수치를 계산할 수 있는 4가지 함수를 제공한다(<span class="exturl" data-url="aHR0cHM6Ly9jYW5pdXNlLmNvbS9jc3MtbWF0aC1mdW5jdGlvbnM=">IE에선 지원하지 않는다<i class="fa fa-external-link-alt"></i></span>). 자주 쓰이지 않을 순 있지만, 그레이디언트와 색깔에 관함 함수 또는 CSS의 커스텀 프로퍼티들과 조합할 때 유용하다. 그래서 아래 4가지 함수와 예시를 함께 들어보려 한다.</p><h2 id="calc">calc()</h2><blockquote><p>calc() 사용 목적 : 단위를 가진 값들의 사칙연산을 가능하도록 하는 것이다. 그리고 단위를 혼합해서도 사용할 수 있다.</p></blockquote><p>예를 들어 뷰포트에서 상단의 네비게이션 영역을 뺀 값을 높이로 설정하고 싶다면 다음과 같이 쓸 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">60px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용하는 디바이스에 따라 <code>100vh</code>가 동적으로 결정되므로, 디바이스에 따라 높이가 달라진다.</p><blockquote><p>calc의 장점은 하드 코딩을 피하고, 인라인 스타일을 추가하는 자바스크립트 로직이 줄어드는 것이다.</p></blockquote><h3 id="calc를-사용한-컬러팔레트-생성">calc()를 사용한 컬러팔레트 생성</h3><p><code>hsl()</code>과 같이 사용하면 hue, saturation, lightness에 css varaible을 넣음으로써 더 응집도 있는 컬러 팔레트를 완성시킬 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  --base-hue: <span class="number">140</span>;</span><br><span class="line">  --saturation: <span class="number">95%</span>;</span><br><span class="line">  --lightness: <span class="number">80%</span>;</span><br><span class="line">  --rotation: <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.25rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="built_in">var</span>(--hue), <span class="built_in">var</span>(--saturation), <span class="built_in">var</span>(--lightness));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color1</span>&#123;</span><br><span class="line">  --hue: <span class="built_in">calc</span>(<span class="built_in">var</span>(--base-hue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color2</span> &#123;</span><br><span class="line">  --hue: <span class="built_in">calc</span>(<span class="built_in">var</span>(--base-hue) + <span class="built_in">var</span>(--rotation));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.color3</span> &#123;</span><br><span class="line">  --hue: <span class="built_in">calc</span>(<span class="built_in">var</span>(--base-hue) + <span class="built_in">var</span>(--rotation) * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="clamp">clamp()</h2><blockquote><p>clamp()의 사용 목적 : 가능한 값의 범주를 지정한다.</p></blockquote><p><code>clamp()</code>는 3가지 매개변수(최소값, 이상적인 값, 최고값)를 받는다. 이 함수는 <code>fluid typography</code>에서 유용하다. <code>fluid typography</code>란 스크린 크기에 비례하여 폰트사이즈가 유동적으로 변하는 것이다.</p><p>따라서 <code>font-size</code>값에 <code>clamp()</code>를 적용하면 이를 만들 수 있다. 이 함수를 사용하면 폰트 사이즈 크기가 너무 커져 제목이 2줄이 되지 않도록 하고 뷰포트의 사이즈를 과도하게 차지하지 않게 할 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1.75rem</span>, <span class="number">4vw</span> + <span class="number">1rem</span>, <span class="number">3rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clamp를-이용한-반응형-패딩">clamp()를 이용한 반응형 패딩</h3><p>또 다른 예제로는 반응형 패딩이 있다. 패딩을 퍼센티지로 사용할 경우에는 요소의 너비를 가지고 계산한다. 이와 비슷하게 vw의 개념도 생각해 볼 수 있다. 아래의 코드를 보면 <code>.element</code>를 가진 요소들은 1rem보다 작은 패딩값을 가지지 않게 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">5%</span>, <span class="number">3rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이를 활용하면 미디어 쿼리를 사용하지 않고도 반응형 패딩을 만들 수 있다.</p>]]></content:encoded>
      
      
      
      <category domain="http://yunpc.github.io/tags/CSS/">CSS</category>
      
      
      <comments>http://yunpc.github.io/2021/08/25/css-math-functions/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>스토리북 작성 방법</title>
      <link>http://yunpc.github.io/2021/08/23/stories/</link>
      <guid>http://yunpc.github.io/2021/08/23/stories/</guid>
      <pubDate>Sun, 22 Aug 2021 15:28:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;스토리북-작성-방법&quot;&gt;스토리북 작성 방법&lt;/h1&gt;
&lt;p&gt;리액트와 함께 스토리북을 작성해보자. 스토리북을 작성하면 코드 작성에 따라 문서가 자동으로 생성되기 때문에 협업을 하기 편리하다.&lt;/p&gt;
&lt;p&gt;일단 컴포넌트를 아래와 같이 작성하였다</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="스토리북-작성-방법">스토리북 작성 방법</h1><p>리액트와 함께 스토리북을 작성해보자. 스토리북을 작성하면 코드 작성에 따라 문서가 자동으로 생성되기 때문에 협업을 하기 편리하다.</p><p>일단 컴포넌트를 아래와 같이 작성하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; string, oneOf &#125; <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HomeLink = <span class="function">(<span class="params">&#123;<span class="keyword">as</span>:Comp, lang, className, children, ...restProps&#125;</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Comp</span> <span class="attr">lang</span> = <span class="string">&#123;lang&#125;</span> <span class="attr">className</span> = <span class="string">&#123;className&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">&quot;www.google.co.kr&quot;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Comp</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/&gt;</span></span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HomeLink.defaultProps = &#123;</span><br><span class="line">    <span class="keyword">as</span> : <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">    lang: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    className: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HomeLink.propTypes = &#123;</span><br><span class="line">    <span class="comment">/** 제목 요소를 설정합니다. */</span></span><br><span class="line">    <span class="keyword">as</span>: oneOf([<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;h2&#x27;</span>,<span class="string">&#x27;h3&#x27;</span>,<span class="string">&#x27;h4&#x27;</span>,<span class="string">&#x27;h5&#x27;</span>,<span class="string">&#x27;h6&#x27;</span>]),</span><br><span class="line">    <span class="comment">/** 언어를 지정할 수 있습니다. (스크린 리더 음성 변경 됨) */</span></span><br><span class="line">    lang: oneOf([<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;ko&#x27;</span>]),</span><br><span class="line">    <span class="comment">/** 클래스 이름을 추가할 수 있습니다. */</span></span><br><span class="line">    className: string,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HomeLink;</span><br></pre></td></tr></table></figure><p>여기서 기본값인 <code>defaultProps</code>를 작성하고 props에 대한 타입을 지정하기 위해 <code>propTypes</code>를 설정한다. 타입스크립트의 경우 이부분은 생략할 수 있다. 만든 컴포넌트는 다시 내보낸다.</p><p>이제 만든 파일에 대한 스토리를 작성한다. 스토리 파일은 아래와 같이 작성할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HomeLink <span class="keyword">from</span> <span class="string">&quot;./HomeLink&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Logo &#125; <span class="keyword">from</span> <span class="string">&quot;components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    title: <span class="string">&#x27;Components/UI/HomeLink&#x27;</span>,</span><br><span class="line">    component: HomeLink,</span><br><span class="line">    parameters:&#123;</span><br><span class="line">        docs: &#123;</span><br><span class="line">            description:&#123;</span><br><span class="line">                component: <span class="string">&#x27;홈 링크 입니다.&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    argTypes: &#123;</span><br><span class="line">        children:&#123;</span><br><span class="line">            table: &#123;<span class="attr">disable</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template = <span class="function">(<span class="params">args</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">HomeLink</span> &#123;<span class="attr">...args</span>&#125;/&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Img = Template.bind(&#123;&#125;);</span><br><span class="line">Img.args = &#123;<span class="attr">as</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">children</span>:<span class="xml"><span class="tag">&lt;<span class="name">Logo</span>&gt;</span><span class="tag">&lt;/<span class="name">Logo</span>&gt;</span></span>&#125;;</span><br><span class="line">Img.storyName = <span class="string">&#x27;홈 링크 (이미지)&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Text = Template.bind(&#123;&#125;);</span><br><span class="line">Text.args = &#123;<span class="attr">as</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">children</span>:<span class="string">&#x27;111&#x27;</span>&#125;;</span><br><span class="line">Text.storyName = <span class="string">&#x27;홈 링크 (텍스트)&#x27;</span>;</span><br></pre></td></tr></table></figure><p>같은 경로에 <code>HomeLink.stories.js</code>를 생성하고 스토리 파일을 작성한다. <code>export default</code>안에 있는 블럭은 각각 다음과 같다.</p><ul><li><code>title</code> : 스토리 파일 내에서 경로 설정</li><li><code>componenet</code> : 해당 컴포넌트에 대한 설명</li><li><code>table</code> : 스토리북 내에서 props의 표시 유무를 설정하는 값. 기본적으론 <code>false</code>이며 이 값이 <code>true</code>로 변경하는 경우 스토리북 내에서 해당 props가 보이지 않게 된다.</li></ul><p>props값에 따라 컴포넌트가 어떻게 변화하는지 보고 싶은 경우에는 템플릿을 작성하여 이를 보여줄 수 있다. <code>Template</code>를 선언하고 여기에 객체를 바인딩하여 내가 전달하고자 하는 props를 매개변수로 전달한다. 이 때 <code>storyName</code>을 통해 스토리북 내에서 표시될 이름을 설정할 수 있다.</p>]]></content:encoded>
      
      
      
      
      <comments>http://yunpc.github.io/2021/08/23/stories/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>noreferrer</title>
      <link>http://yunpc.github.io/2021/04/21/noreferrer/</link>
      <guid>http://yunpc.github.io/2021/04/21/noreferrer/</guid>
      <pubDate>Wed, 21 Apr 2021 13:53:37 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;링크-타입-noreferrer&quot;&gt;링크 타입 : noreferrer&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;noreferrer&lt;/code&gt;는 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;f</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="링크-타입-noreferrer">링크 타입 : noreferrer</h1><p><code>noreferrer</code>는 <code>&lt;a&gt;</code>, <code>&lt;area&gt;</code>, <code>&lt;form&gt;</code>의 <code>rel</code> 속성에 쓰는 속성 값이다. 타겟 브라우저로 이동할 때 원 브라우저에 대한 정보(Referer)를 제공하지 않는다. 레퍼러를 제공하지 않기 때문에 새 탭으로 인한 보안 문제가 해결된다. 이런 면에서는 <code>noopener</code>가 쓰인 것과 같은 효과를 볼 수 있다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/">HTML/CSS</category>
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/Docs/">Docs</category>
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/Docs/MDN/">MDN</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/21/noreferrer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>nooopener</title>
      <link>http://yunpc.github.io/2021/04/21/noopener/</link>
      <guid>http://yunpc.github.io/2021/04/21/noopener/</guid>
      <pubDate>Wed, 21 Apr 2021 12:14:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;링크-타입-noopener&quot;&gt;링크 타입: noopener&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;noopener&lt;/code&gt;란 &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;태그의 &lt;code&gt;rel&lt;/co</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="링크-타입-noopener">링크 타입: noopener</h1><p><code>noopener</code>란 <code>a</code>, <code>area</code>, <code>form</code>태그의 <code>rel</code>속성에 들어가는 속성 값이다. 이 값은 새로운 창이 열려있을 때, 기존에 브라우징 되어있는 요소에 접근할 수 없도록 한다.</p><blockquote><p>A브라우저에서 링크를 타고 B브라우저를 새탭에서 열었을 경우 <code>Window.opener</code>라는 객체가 생기는데, 이걸 통해 B브라우저가 A브라우저를 악의적으로 동작하게 만들 수 있기 때문에 <code>noopener</code>는 이 객체를 생성하지 않고 널값을 반환한다.</p></blockquote><p>이 값은 특히 신뢰할 수 없는 사이트에 들어갈 때 유용하다. 이 값을 사용하면 <code>Window.opener</code>를 통해서 현재 브라우저에 접근할 수 있는 통로를 차단한다. (이 값을 사용한다는 기본 전제는 <code>Referer</code>HTTP 헤더를 사용한다는 것이다. 리퍼러는 사용자가 어디에서 새 브라우저로 왔는지 url에 보여준다. 이 정보가 명확히 있기 때문에 <code>Window.opener</code>에서 조작할 수 있는건데, <code>noreferrer</code>를 사용한다면 애초에 어디서부터 왔는지 보이지 않기 때문에 <code>noopener</code>를 사용할 이유가 없어진다.)</p><p><code>noopener</code>를 사용할 경우 <code>target</code>속성에 기존 속성값이 아닌 임의의 값을 넣으면 <code>_blank</code>처럼 여겨져서 계속 새로운 창을 띄운다.(원래는 프레임 내임으로 탭이 하나 생성되고 링크를 여러번 타도 그 창을 삭제하지 않는 한 새로운 탭이 생성되지 않는다.)</p><blockquote><p>현재 <code>target="_blank"</code>를 <code>&lt;a&gt;</code>태그에 사용하면 이 값이 암묵적으로 적용된다.</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/">HTML/CSS</category>
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/Docs/">Docs</category>
      
      <category domain="http://yunpc.github.io/categories/HTML-CSS/Docs/MDN/">MDN</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/21/noopener/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>가사 검색</title>
      <link>http://yunpc.github.io/2021/04/09/Song-Search/</link>
      <guid>http://yunpc.github.io/2021/04/09/Song-Search/</guid>
      <pubDate>Fri, 09 Apr 2021 01:32:31 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;가사에 사용된 모든 단어들이 담긴 배열 &lt;code&gt;words&lt;/code&gt;에서 &lt;code&gt;queries&lt;/code&gt;에 해당되는 단어가 몇 개가 있는지 반환하는 문제이다. &lt;code&gt;querie</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>가사에 사용된 모든 단어들이 담긴 배열 <code>words</code>에서 <code>queries</code>에 해당되는 단어가 몇 개가 있는지 반환하는 문제이다. <code>queries</code>에는 와일드 카드 <code>?</code>가 하나 이상 존재하며, 이 와일드 카드는 문자의 앞부분을 차지하거나 뒷부분만을 차지한다(<code>fr?do</code>와 같은 형식이 없다.).</p><p><span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNjAwNjA=">문제 링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><p>trie 자료구조를 이용하여 문제를 풀 수 있다. 이번에는 다른 분의 핵심 아이디어를 듣고 코드로 구현하였다. 코드는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">words, queries</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value=<span class="literal">None</span></span>):</span></span><br><span class="line">            self.value = value</span><br><span class="line">            self.child = <span class="built_in">dict</span>()</span><br><span class="line">            self.len_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.root = Node()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, value:<span class="built_in">str</span></span>):</span></span><br><span class="line">            node = self.root</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">                <span class="comment"># add dictionary for wildcard</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(value) <span class="keyword">not</span> <span class="keyword">in</span> node.len_dict:</span><br><span class="line">                    node.len_dict[<span class="built_in">len</span>(value)] = <span class="number">0</span></span><br><span class="line">                node.len_dict[<span class="built_in">len</span>(value)] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> node.child: <span class="comment"># There is no child</span></span><br><span class="line">                    new_node = Node(c)</span><br><span class="line">                    node.child[c] = new_node</span><br><span class="line">                    node = new_node</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    node = node.child[c]</span><br><span class="line">            node.child[<span class="string">&#x27;*&#x27;</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, queri</span>):</span></span><br><span class="line">            node = self.root</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> queri:</span><br><span class="line">                <span class="keyword">if</span> c == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> node.len_dict[<span class="built_in">len</span>(queri)] <span class="keyword">if</span> <span class="built_in">len</span>(queri) <span class="keyword">in</span> node.len_dict <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> c <span class="keyword">in</span> node.child:</span><br><span class="line">                    node = node.child[c]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># def print(self):</span></span><br><span class="line">        <span class="comment">#     node = self.root</span></span><br><span class="line">        <span class="comment">#     queue = []</span></span><br><span class="line">        <span class="comment">#     queue.append(node)</span></span><br><span class="line">        <span class="comment">#     while queue:</span></span><br><span class="line">        <span class="comment">#         root = queue[0]</span></span><br><span class="line">        <span class="comment">#         del queue[0]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#         if root.value is not None:</span></span><br><span class="line">        <span class="comment">#             print(root.value, end = &quot; &quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#         if  &#x27;*&#x27; in root.child:</span></span><br><span class="line">        <span class="comment">#             print(&#x27;*&#x27;)</span></span><br><span class="line">        <span class="comment">#             continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#         for node in root.child.values():</span></span><br><span class="line">        <span class="comment">#             queue.append(node)</span></span><br><span class="line">    </span><br><span class="line">    reversed_words = [word[::-<span class="number">1</span>] <span class="keyword">for</span> word <span class="keyword">in</span> words]</span><br><span class="line"></span><br><span class="line">    trie = Trie()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        trie.add(word)</span><br><span class="line"></span><br><span class="line">    reversed_trie = Trie()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> reversed_words:</span><br><span class="line">        reversed_trie.add(word)</span><br><span class="line"></span><br><span class="line">    answer = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> queri <span class="keyword">in</span> queries:</span><br><span class="line">        <span class="keyword">if</span> queri[<span class="number">0</span>] == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            answer.append(reversed_trie.search(queri[::-<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            answer.append(trie.search(queri))</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>일단 Trie에 대해서 알아야 하는데 이에 대한 <span class="exturl" data-url="aHR0cHM6Ly9ob29vbmdzLnRpc3RvcnkuY29tLzI4">링크<i class="fa fa-external-link-alt"></i></span>를 첨부해 두었으니 참고하면 좋을 것 같다. 이에 대해 안다고 가정하고 설명을 진행한다.</p><p>이 문제에서 제한 시간내에 문제를 풀기 위한 핵심 요소는 와일드 카드의 사용이다. 문자 사이에 와일드 카드가 올 일은 없기 때문에 만약 접미사가 와일드 카드이면 더 이상 Trie를 탐색하지 않도록 해야 문제가 풀린다.</p><p>이를 풀기 위해 <code>len_dict</code>를 생성하였다. <code>len_dict</code>는 해당 노드에서 뻗어나가는 단어들을 길이에 따라 몇 개의 단어가 있는지 알려주는 딕셔너리이다. 문제 테스트 케이스에 대해 len_dict를 그려보자면 다음과 같다.</p><figure><img src="/images/programmers/trie.jpeg" alt="Trie와 len_dict" /><figcaption aria-hidden="true">Trie와 len_dict</figcaption></figure><p>그림을 보면 root에 5글자를 가진 단어 5개 6글자를 가진 단어 1개를 표시해두고 아래로 뻗어 나가면서 각자의 위치에 자신의 하위 위치에 있는 단어들의 개수를 길이에 따라 저장해둔 것을 볼 수 있다. 이런식으로 했을때 만약 <code>fro??</code>와 같은 쿼리가 들어오면 o까지만 순회를 하고 5를 key값으로 하는 value 3을 리턴해주면 된다.</p><p>이렇게 하면 해결하지 못하는 케이스가 여전히 있는데 바로 와일드 카드가 앞쪽에 붙는 경우다. 이렇게 하면 모든 단어를 순회해봐야 알 수 있게 되기 때문에 역시나 효율성에서 애를 먹는다. 이를 해결하는 방법은 간단한다. 단어를 거꾸로 하여 새로운 Trie를 만들고 쿼리도 역으로 하여 <code>search</code>를 진행하면 된다.</p><p>시간복잡도를 계산하자면, words의 길이를 n, 개수를 m이라 하면 trie를 생성하는데에 <span class="math inline">\(O(nm)\)</span>이 든다. 이를 만들고 쿼리를 진행하므로 <code>queries</code>의 길이를 q라하고 개수를 p라하면, <span class="math inline">\(O(pq)\)</span>만큼 소요된다. 따라서 최종 시간복잡도는 <span class="math inline">\(O(nm) + O(pq)\)</span>이다.</p><p>너무 시간복잡도가 어마어마하게 느껴질 수도 있지만, 와일드카드와 단어간의 중첩이 있어 실질적인 시간은 좀 더 짧다고 생각한다.</p><h2 id="테스트">테스트</h2><p><br></p><figure><img src="/images/programmers/song_search.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p><br></p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level4/">Level4</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/09/Song-Search/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>평범한 배낭</title>
      <link>http://yunpc.github.io/2021/04/06/Knapsack/</link>
      <guid>http://yunpc.github.io/2021/04/06/Knapsack/</guid>
      <pubDate>Tue, 06 Apr 2021 12:06:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;0-1 knapsack 문제이다.&lt;/p&gt;
&lt;h2 id=&quot;문제풀이&quot;&gt;문제풀이&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이번에는 내 코드와 강사님이 최적화를 거친 코드를 단계로 보며 DP에 대해 정리하려고 한</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>0-1 knapsack 문제이다.</p><h2 id="문제풀이">문제풀이</h2><hr /><p>이번에는 내 코드와 강사님이 최적화를 거친 코드를 단계로 보며 DP에 대해 정리하려고 한다. 일단 필자의 코드는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">N, K = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">values = []</span><br><span class="line">weights = []</span><br><span class="line"></span><br><span class="line">max_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    w, v = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    values.append(v)</span><br><span class="line">    weights.append(w)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack</span>(<span class="params">values, weights, n, W</span>):</span></span><br><span class="line">    <span class="keyword">if</span> W &lt;= <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n-<span class="number">1</span>, W) <span class="keyword">in</span> max_dict:</span><br><span class="line">        <span class="keyword">return</span> max_dict[(n-<span class="number">1</span>, W)]</span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> W &gt;= weights[n-<span class="number">1</span>]:</span><br><span class="line">        res =  <span class="built_in">max</span>(knapsack(values, weights, n-<span class="number">1</span>, W), </span><br><span class="line">        knapsack(values, weights, n-<span class="number">1</span>, W-weights[n-<span class="number">1</span>]) + values[n-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = knapsack(values, weights, n-<span class="number">1</span>, W)</span><br><span class="line"></span><br><span class="line">    max_dict[(n-<span class="number">1</span>, W)] = res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(knapsack(values, weights, N, K))</span><br></pre></td></tr></table></figure><p>재귀를 이용한 구현이다. 가용치를 <code>W</code>라하고, <code>n</code>을 넣을 물건의 고유번호라고 생각하면, 이 둘이 0일 때 반환하는 값은 0이다.</p><p>계산했던 값을 저장하기 위해 <code>max_dict</code> 딕셔너리를 이용하였다. 여기에 들어가는 키 값은 물건의 고유번호와 가용치가 묶인 튜플이다. 값으로는 최대가치를 반환한다.</p><p>이 값이 만약에 존재한다면 계산 해뒀던 값이므로 이 값을 반환한다. 그렇지 않은 경우 값을 새로 계산하여야 한다. 만약 가용치안에 현재 물건이 들어갈 수 있다면, 들어간 경우와 그렇지 않은 경우를 모두 고려하여 값을 계산한다.</p><p>가용치안에 물건이 들어갈 수 없다면 없는 경우만 고려하면 된다. 이 때 계산한 값을 딕셔너리에 저장하는 것을 잊지말자!</p><p>백준에 결과를 돌려보면 다음과 같다.</p><figure><img src="/images/baekjoon/12865.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p>이제 여기서 최적화를 한 단계씩 해나갈 수 있다. 기존의 Top-down방식을 Bottom-up으로 구성하면 코드는 다음과 같이 변경할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">N, K = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>.split())</span><br><span class="line"></span><br><span class="line">W = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line">V = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    W[i], V[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>.split())</span><br><span class="line"></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(K+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, K+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> w &gt;= W[i]:</span><br><span class="line">            dp[i][w] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>][w], dp[i-<span class="number">1</span>][w-W[i]] + V[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i][w] = dp[i-<span class="number">1</span>][w]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp[N][K]) </span><br></pre></td></tr></table></figure><p><code>dp</code>라는 2차원 리스트를 만들어서 <code>i</code>번째 물건을 가중치 <code>W</code>에 따라 넣는 경우와 넣지 않는 경우, 넣지 못하는 경우를 전부 기록한다.</p><figure><img src="/images/baekjoon/12865-1.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p>위와 비교하여 메모리도 늘고 시간도 늘었다. 실은 이건 재귀에 비하면 느릴 수 있는게 애초에 2차원 배열의 모든 요소를 사용하지 않기 때문에 메모리 낭비가 있기 때문이다. 그리고 표의 모든 요소를 채우기 때문에 시간도 그만큼 오래 걸린다. 하지만 재귀같은 경우 998번이 넘는 호출을 할수가 없기 떄문에 데이터 값이 큰 경우 재귀는 사용하기 어렵기 때문에 이걸 알아놔야 한다.</p><p>여기서 보이는 개선 방안은 크게 두가지 이다.</p><ol type="1"><li>공간의 낭비</li><li>표의 모든 요소를 계산할 필요가 없는 것</li></ol><p>이 두가지를 최적화 시켜나가려고 한다. 일단 공간적인 면에서 최적화를 시켜보자. 코드를 자세히 보면 점화식을 사용하는 부분에서 <code>i-1</code>번째 줄만 사용하는 것을 볼 수 있다. 그럼 그 이전의 행은 더 이상 쓸 일이 없으므로 이 부분에 대해서 최적화를 하면 다음과 같은 코드로 변경할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">N, K = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">W = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line">V = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    W[i], V[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(K+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, K+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> w &gt;= W[i]:</span><br><span class="line">            dp[i%<span class="number">2</span>][w] = <span class="built_in">max</span>(dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w], dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w-W[i]] + V[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i%<span class="number">2</span>][w] = dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp[N%<span class="number">2</span>][K]) </span><br></pre></td></tr></table></figure><p>i값에 따라 번갈아 가면서 값을 쓸 수 있도록 하였다.</p><figure><img src="/images/baekjoon/12865-2.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p>연산 횟수는 다르지 않기 때문에 걸리는 시간은 그대로지만, 메모리 사용량이 크게 준 것을 확인하였다.</p><p>여기서 이제 2번에 대한 최적화를 추가로 할 수 있다. 연산량을 줄이는 것인데, 재귀로 코드를 짰을 때 호출되는 <code>w</code> 값을 계산하여 이를 저장하고 for문에서 이 값들에 대한 계산만 하면 최적화를 할 수 있다.</p><p>코드는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">N, K = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">W = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line">V = [<span class="number">0</span>] * (N + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    W[i], V[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">need_calc = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">need_calc[N].add(K)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> need_calc[i]:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> w == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> w &gt;= W[i]:</span><br><span class="line">            need_calc[i-<span class="number">1</span>].add(w-W[i])</span><br><span class="line">        need_calc[i-<span class="number">1</span>].add(w)</span><br><span class="line"></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(K + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> need_calc[i]:</span><br><span class="line">        <span class="keyword">if</span> w &gt;= W[i]:</span><br><span class="line">            dp[i%<span class="number">2</span>][w] = <span class="built_in">max</span>(dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w], dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w-W[i]] + V[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i%<span class="number">2</span>][w] = dp[(i-<span class="number">1</span>)%<span class="number">2</span>][w]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dp[N%<span class="number">2</span>][K])</span><br></pre></td></tr></table></figure><p>첫번째 for문을 주목하자. 우리는 이미 점화식을 통해 계산해야 하는 <code>w</code>값을 알 수 있다. 그래서 초기에 최종 가용치만을 넣어두고 여기에서 두 경우(선택하는 경우와 하지 않는 경우)로 나누어서 계산에 쓰이는 <code>w</code>값만 <code>need_calc</code>에 넣는다.</p><figure><img src="/images/baekjoon/12865-3.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p>오버헤드가 없기 때문에 시간이 재귀보다 단축한 것을 볼 수 있다. 이렇게 최적화 과정에 대해 공부하였는데, 공부를 많이 해야겠다는 생각이 든다. 기죽지 말고 꾸준히 공부해야겠다. ✍️</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Beakjoon/">Beakjoon</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Beakjoon/12000-12999/">12000-12999</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/06/Knapsack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>도둑질</title>
      <link>http://yunpc.github.io/2021/04/06/Stolen/</link>
      <guid>http://yunpc.github.io/2021/04/06/Stolen/</guid>
      <pubDate>Tue, 06 Apr 2021 12:05:29 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;인접한 집을 털지 않으면서 최대한 많은 돈을 도둑질하는 문제이다. 이 때 집은 원형으로 이어져 있다고 가정하기 때문에 첫번째 인덱스와 마지막 인덱스가 이어져있다. &lt;span class=&quot;ex</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>인접한 집을 털지 않으면서 최대한 많은 돈을 도둑질하는 문제이다. 이 때 집은 원형으로 이어져 있다고 가정하기 때문에 첫번째 인덱스와 마지막 인덱스가 이어져있다. <span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDI4OTc=">문제 링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">money</span>):</span></span><br><span class="line">    dp1 = [<span class="number">0</span>] * (<span class="built_in">len</span>(money)-<span class="number">1</span>)</span><br><span class="line">    dp1[<span class="number">0</span>] = money[<span class="number">0</span>]</span><br><span class="line">    dp1[<span class="number">1</span>] = <span class="built_in">max</span>(money[<span class="number">0</span>], money[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(money)-<span class="number">1</span>):</span><br><span class="line">        dp1[i] = <span class="built_in">max</span>(dp1[i-<span class="number">1</span>], money[i]+dp1[i-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    dp2 = [<span class="number">0</span>] * <span class="built_in">len</span>(money)</span><br><span class="line">    dp2[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    dp2[<span class="number">1</span>] = money[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(money)):</span><br><span class="line">        dp2[i] = <span class="built_in">max</span>(dp2[i-<span class="number">1</span>], money[i]+dp2[i-<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp1[-<span class="number">1</span>], dp2[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><p>집이 원형으로 이어져있을 때의 조건을 생각하지 못해서 결국 풀이를 봤다. 결론적으로 말하면 첫번째집과 마지막집은 동시에 선택하지 못한다! 그래서 이 경우를 둘로 나눠서 생각한다.</p><ol type="1"><li>마지막 집을 제외하고 도둑질 할 수 있는 최대 금액을 찾는다.</li><li>첫번째 집을 제외하고 도둑질 할 수 있는 최대 금액을 찾는다.</li><li>위의 두 값 중에서 큰 값을 반환한다.</li></ol><p>이렇게 하면 겹치는 케이스가 존재할 수 있지만 적어도 피하려고 하는 케이스만을 제외하고 나머지 경우의 수를 다 구할 수 있다.</p><p>시간 복잡도는 <span class="math inline">\(O(n)\)</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><figure><img src="/images/programmers/stolen.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p><br></p><p>DP는 너무 어렵다.. 유형중에 제일 해보지 않아서 어색하다. 백준에서 DP문제만 골라 풀어봐야겠다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level4/">Level4</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/06/Stolen/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2xn 타일링(파이썬)</title>
      <link>http://yunpc.github.io/2021/04/06/2Tiling/</link>
      <guid>http://yunpc.github.io/2021/04/06/2Tiling/</guid>
      <pubDate>Tue, 06 Apr 2021 12:05:13 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;가로 길이가 2이고 세로의 길이가 1인 직사각형 모양의 타일이 있다. 이 타일로 2*n바닥을 덮을 수 있는 경우의 수를 구하는 문제이다.&lt;/p&gt;
&lt;h2 id=&quot;문제풀이&quot;&gt;문제풀이&lt;/h2&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>가로 길이가 2이고 세로의 길이가 1인 직사각형 모양의 타일이 있다. 이 타일로 2*n바닥을 덮을 수 있는 경우의 수를 구하는 문제이다.</p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">n</span>):</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    fn, fn_1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        fn, fn_1 = fn_1, fn+fn_1</span><br><span class="line">        fn %= <span class="number">1000000007</span></span><br><span class="line">        fn_1 %= <span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fn % <span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">4</span>))</span><br></pre></td></tr></table></figure> 자바로 풀 때보다 코드가 한결 간결하다. 이 문제를 잘 생각해보면 피보나치 수열과 원리가 같다는 것을 알 수 있다. 자바로 풀 때는 재귀로 풀었었는데, 파이썬은 반복을 통해서 구현하였다.</p><p>시간 복잡도는 <span class="math inline">\(O(n)\)</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><figure><img src="/images/programmers/2nTiling.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p><br></p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/06/2Tiling/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>베스트앨범</title>
      <link>http://yunpc.github.io/2021/04/05/Best-Albam/</link>
      <guid>http://yunpc.github.io/2021/04/05/Best-Albam/</guid>
      <pubDate>Mon, 05 Apr 2021 12:05:48 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;베스트 앨범에 곡을 넣는 문제이다. 우선순위는 다음과 같다.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;재생 횟수가 가장 많은 장르를 먼저 배치한다.&lt;/li&gt;
&lt;li&gt;장르 안에서 재생 횟수가 많</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>베스트 앨범에 곡을 넣는 문제이다. 우선순위는 다음과 같다.</p><ol type="1"><li>재생 횟수가 가장 많은 장르를 먼저 배치한다.</li><li>장르 안에서 재생 횟수가 많은 곡 두개를 넣는다. 곡이 하나라면 하나만 넣는다.</li><li>재생 횟수가 동일할 경우 고유번호(인덱스)가 낮은 것을 우선 배치한다.</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDI1Nzk=">문제 링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><p>이번 문제는 기존 내 코드와 파이써닉하게 작성된 코드를 비교하려고 한다. 이건 기존에 혼자 풀이한 코드이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">genres, plays</span>):</span></span><br><span class="line">    answer = []</span><br><span class="line">    genre_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, genre <span class="keyword">in</span> <span class="built_in">enumerate</span>(genres):</span><br><span class="line">        <span class="keyword">if</span> genre_dict.get(genre) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            genre_dict[genre] = plays[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v = genre_dict.get(genre)</span><br><span class="line">            genre_dict[genre] = v + plays[i]</span><br><span class="line"></span><br><span class="line">    sorted_dict = <span class="built_in">sorted</span>(genre_dict.items(), key = (<span class="keyword">lambda</span> x : x[<span class="number">1</span>]), reverse = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> el <span class="keyword">in</span> sorted_dict:</span><br><span class="line">        song_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, genre <span class="keyword">in</span> <span class="built_in">enumerate</span>(genres):</span><br><span class="line">            <span class="keyword">if</span> genre == el[<span class="number">0</span>]:</span><br><span class="line">                song_dict[i] = plays[i]</span><br><span class="line"></span><br><span class="line">        sorted_song_dict = <span class="built_in">sorted</span>(song_dict.items(), key = (<span class="keyword">lambda</span> x : x[<span class="number">1</span>]), reverse = <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(sorted_song_dict):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            answer.append(item[<span class="number">0</span>])</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>genre_dict</code>는 장르별로 총 플레이 횟수를 저장하기 위한 딕셔너리이다. <code>enumerate</code>를 활용하여 장르가 저장되어 있지 않은 경우 새로 등록을 하고, 이미 있는 경우에는 저장된 값에 현재 재생횟수를 추가한다.</p><p><code>genre_dict</code>는 <code>sorted</code>를 활용하여 값을 기준으로 내림차순 정렬을 한다. 이렇게 하면 1번 조건을 만족할 수 있게 된다.</p><p>이제 2,3번에 관한 처리를 해야한다. <code>sorted_dict</code>에서 값을 꺼내면서 장르마다 그 장르에 속하는 곡을 찾아낸다. 곡을 찾을 경우 곡의 인덱스를 키로 하고 재생횟수를 값으로 하여 딕셔너리에 추가한다.</p><p>이 뒤는 1번과 비슷하다. <code>sorted</code>를 다시 활용하여 값을 기준으로 내림차순 정렬한다(<code>sorted_song_dict</code>).</p><p>이제 여기서 2개씩 꺼내서 <code>answer</code>리스트에 추가한다. 들어있는 요소가 한개라면 하나만 넣고 종료한다.</p><p>알고리즘은 똑같다. 하지만 파이써닉 하게 작성한 코드를 보면 코드 라인이 확실히 줄어든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">genres, plays</span>):</span></span><br><span class="line">    ht1 = <span class="built_in">dict</span>()</span><br><span class="line">    ht2 = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(genres, plays)):</span><br><span class="line">        g, p = elem</span><br><span class="line">        <span class="keyword">if</span> g <span class="keyword">not</span> <span class="keyword">in</span> ht1:</span><br><span class="line">            ht1[g] = <span class="number">0</span></span><br><span class="line">            ht2[g] = []</span><br><span class="line"></span><br><span class="line">        ht1[g] += p</span><br><span class="line">        ht2[g].append((i, p))</span><br><span class="line">                    <span class="comment">#(g,p)              # -p 내림차순!</span></span><br><span class="line">    sort_ht1 = <span class="built_in">sorted</span>(<span class="built_in">list</span>(ht1.items()), key = <span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> g,p <span class="keyword">in</span> sort_ht1:</span><br><span class="line">        sort_ht2 = <span class="built_in">sorted</span>(ht2[g], key= <span class="keyword">lambda</span> x: -x[<span class="number">1</span>])</span><br><span class="line">        answer += <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x[<span class="number">0</span>], sort_ht2))[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><ol type="1"><li><code>zip</code>을 통해 기존 인덱스 접근과는 다른 접근 방식을 보여준다.</li><li><code>sorted</code>에서 람다함수 부분을 보면 <code>reverse</code>속성이 없고 대신 값에 마이너스를 취한 것을 볼 수 있다. 기능의 차이는 없지만 이렇게 한 경우 코드가 더 간결해 보인다.</li><li><code>map</code>과 <code>lambda</code>를 활용하여 곡의 고유번호 2개를 가져온다. 이때 <code>list</code>로 묶에 슬라이싱을 한다.</li></ol><h2 id="테스트">테스트</h2><p><br></p><figure><img src="/images/programmers/bestalbam.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p><br></p><p>통과는 하였지만 파이써닉하게 푸는 것은 아직 더 공부가 필요할 것 같다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/05/Best-Albam/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>1920번 수 찾기</title>
      <link>http://yunpc.github.io/2021/04/05/Find-Num/</link>
      <guid>http://yunpc.github.io/2021/04/05/Find-Num/</guid>
      <pubDate>Mon, 05 Apr 2021 04:25:15 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;이분 탐색을 이용한 수 탐색 문제이다.&lt;/p&gt;
&lt;h2 id=&quot;문제풀이&quot;&gt;문제풀이&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;전체 코드는 다음과 같다. &lt;figure class=&quot;highlight python</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>이분 탐색을 이용한 수 탐색 문제이다.</p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">A, key</span>):</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = <span class="built_in">len</span>(A)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[mid] == key:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> A[mid] &gt; key:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">A = <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(A):</span><br><span class="line">    A[i] = <span class="built_in">int</span>(A[i])</span><br><span class="line"></span><br><span class="line">A.sort()</span><br><span class="line"></span><br><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">X = <span class="built_in">input</span>().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(X):</span><br><span class="line">    <span class="built_in">print</span>(binary_search(A, <span class="built_in">int</span>(X[i])))</span><br></pre></td></tr></table></figure></p><p>이분 탐색을 구현하는 문제이다. 입력을 받는 부분을 건너 뛰고 <code>binary_search</code>함수를 보면 된다. 인덱스를 기준으로 이분탐색을 진행한다.</p><h2 id="테스트">테스트</h2><p><br></p><figure><img src="/images/baekjoon/1920.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p><br></p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Beakjoon/">Beakjoon</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Beakjoon/1000-1999/">1000-1999</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/05/Find-Num/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>징검다리</title>
      <link>http://yunpc.github.io/2021/04/02/Stepping-Stone/</link>
      <guid>http://yunpc.github.io/2021/04/02/Stepping-Stone/</guid>
      <pubDate>Fri, 02 Apr 2021 11:21:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;징검다리에서 돌을 빼냈을 때 벌어지는 간격의 최솟값이 가장 큰 것을 구하는 것이다. 문제는 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wcm9ncmFtbWVy</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>징검다리에서 돌을 빼냈을 때 벌어지는 간격의 최솟값이 가장 큰 것을 구하는 것이다. 문제는 <span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDMyMzg=">여기<i class="fa fa-external-link-alt"></i></span>에서 볼 수 있다.</p><h2 id="문제풀이">문제풀이</h2><hr /><p>이진 탐색을 이용한 문제이다. 유형을 익히면 반가운 문제이지만, 처음에 보면 전혀 감이 안 잡힌다.</p><p>전체 코드는 다음과 같다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">distance, rocks, n</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFeasable</span>(<span class="params">distance, rocks, n, k</span>):</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        total = <span class="built_in">len</span>(rocks)</span><br><span class="line">        <span class="keyword">for</span> rock <span class="keyword">in</span> rocks:</span><br><span class="line">            <span class="keyword">if</span> rock - pos &gt;= k:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                pos = rock</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total-cnt &lt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = distance</span><br><span class="line">    rocks.sort()</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = (l+r) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span>(isFeasable(distance, rocks, n, mid)):</span><br><span class="line">            answer = mid</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution(<span class="number">25</span>, [<span class="number">2</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">17</span>], <span class="number">2</span>))</span><br></pre></td></tr></table></figure> 전체적인 코드의 흐름은 다음과 같다. 1. 간격에 대해서 이분 탐색을 해볼 것이다. 이를 <code>k</code>라고 두자. 2. <code>k</code>의 가장 작은 경우는 0이고 가장 큰 경우는 <code>distance</code>이므로 <code>l</code>과 <code>r</code>로 둔다. 3. 이분 탐색을 하면서 만약 <code>isFeasable</code>을 만족한다면, 돌을 더 빼도 된다는 의미이다. 따라서 mid 값을 늘린다. 4. 아니라면 mid 값을 줄인다. 5. 아니면 answer를 반환한다.</p><p>여기서 왜 돌을 더 빼도 된다는 의미에 대해 알아보기 위해 <code>isFeasable</code>을 살펴보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isFeasable</span>(<span class="params">distance, rocks, n, k</span>):</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    total = <span class="built_in">len</span>(rocks)</span><br><span class="line">    <span class="keyword">for</span> rock <span class="keyword">in</span> rocks:</span><br><span class="line">        <span class="keyword">if</span> rock - pos &gt;= k:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            pos = rock</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> total-cnt &lt;= n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>매개변수로 <code>distance</code>, <code>rocks</code>, <code>n</code>, <code>k</code>를 받는다. <code>cnt</code>는 돌의 개수를 의미하고 <code>pos</code>는 현재 선택한 돌의 위치를 본다. <code>total</code>은 총 돌의 개수를 의미한다.</p><p>for 문의 의미는 최솟값 <code>k</code>만큼의 간격에 포함되는 돌들을 세겠다는 의미이다. 프로그래머스에서 나온 예제를 보면 돌이 [2, 11, 14, 17, 21]의 순서로 놓여있다. 가령 <code>k</code>가 6이라면 [11, 17]에 위치한 돌이 선택되고 <code>cnt</code>는 2가 된다. <code>total</code>에서 <code>cnt</code>를 빼면 몇 개의 돌이 빠졌는지 볼 수 있고 이 값이 <code>n</code>보다 같거나 작으면 <code>True</code>를 반환한다.</p><p>이하에서 <code>True</code>를 반환하는 이유가 있다. 아래의 그림을 보자.</p><figure><img src="/images/programmers/stepping.jpeg" alt="k와 n의 관계" /><figcaption aria-hidden="true">k와 n의 관계</figcaption></figure><p><code>k</code>값이 증가하면 <code>n</code>값도 증가한다. 최솟값이 증가하니 돌 사이의 간격이 더 넓어져야 하기 때문이다. 여기서 우리는 <code>n</code>을 만족하는 최대를 구하려고 한다. 그러면 <code>l</code>이 증가해야 하는 경우를 살펴보아야 한다. 그림을 보면 <code>n</code>의 값이 요구하는 값보다 작을 때 <code>k</code>가 증가해야 함을 볼 수 있다. 이 이유로 인해 비교 연산자 <code>&lt;=</code>를 사용한 것이다.</p><h2 id="테스트">테스트</h2><figure><img src="/images/programmers/stepping_stone.png" alt="테스트 화면" /><figcaption aria-hidden="true">테스트 화면</figcaption></figure><p>자바로 하다가 파이썬으로 넘어오니까 코드가 훨씬 간결해서 놀랐다. 이제부터라도 열심히 애용하겠다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level4/">Level4</category>
      
      
      
      <comments>http://yunpc.github.io/2021/04/02/Stepping-Stone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>입국심사</title>
      <link>http://yunpc.github.io/2021/03/09/Immigration/</link>
      <guid>http://yunpc.github.io/2021/03/09/Immigration/</guid>
      <pubDate>Tue, 09 Mar 2021 08:19:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;입국 심사관들이 승객들을 심사하는데 걸리는 가장 최소 시간을 구하는 문제이다. &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>입국 심사관들이 승객들을 심사하는데 걸리는 가장 최소 시간을 구하는 문제이다. <span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDMyMzg=">문제 링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Immigration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//프로그래머스 문제풀이 level3 입국심사</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span>[] times = &#123;<span class="number">7</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(times);</span><br><span class="line">        System.out.println(BinarySearch(times, n, times[times.length-<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span>[] times, <span class="keyword">int</span> n, <span class="keyword">long</span> max)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1</span>, r = max * n;</span><br><span class="line">        <span class="keyword">long</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(isPassed(times, n, mid))</span><br><span class="line">            &#123;</span><br><span class="line">                ans = Math.min(ans, mid);</span><br><span class="line">                r = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPassed</span><span class="params">(<span class="keyword">int</span>[] times, <span class="keyword">int</span> n, <span class="keyword">long</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> amount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times.length; i++)</span><br><span class="line">            amount +=  mid / times[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(amount &gt;= n)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전체 코드는 다음과 같다.</p><p>일단 심사하는데 걸리는 시간을 정렬한다. 이 문제를 해결하기 위한 큰 그림은 이분탐색을 활용하는 것이다. 이분탐색의 mid를 걸리는 최대 시간으로 가정한다. 그리고 이 최대시간을 적용했을 때 모든 승객들을 심사할 수 있는지 검사한다. 만약 모든 승객을 검사할 수 있다면 midr값을 줄이고, 아니라면 mid값을 늘린다.</p><p>이분 탐색에서 초기 <code>l</code>값은 1로 <code>r</code>값은 가장 오래 걸리는 심사기간에 n을 곱한다. 그 뒤로는 <code>isPassed</code>함수를 통해 모든 승객을 심할 수 있는지 검사하고 만약 검사할 수 있다면, 정답을 더 작은 쪽으로 업데이트하고 <code>r</code>값을 <code>mid+1</code>로 업데이트한다.</p><p>그렇지 않다면 <code>mid</code>값이 더 커져야 한다는 의미이므로 <code>l</code>을 <code>mid+1</code>로 업데이트한다.</p><p><code>isPassed</code>를 검사하는 방법은 들어온 <code>mid</code>값에 대해 심사위원의 시간을 나눠서 검사를 할 수 있는 사람의 수를 전부 더해본다. 만약 이 값이 <code>n</code>을 넘는다면, <code>true</code>를 반환하고, 그렇지 않으면 <code>false</code>를 반환한다.</p><p><code>times</code>의 길이를 <code>m</code>이라 하고, <code>times</code>에서 가장 큰 값을 <code>x</code>라 한다면, 최종 시간복잡도는 <span class="math display">\[O(mlognx)\]</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><center><img src="/images/programmers/immigration.png" width="290" height="230"></center><p><br></p><p>처음 풀이를 틀려서 다른 사람의 풀이를 참고했는데, 이게 전형적인 이분탐색 문제라고 해서 알아보지 못한 내 자신이 원망스러웠다. 학교 수업 때 이러한 유형을 풀어본 적이 있기 때문이다. 보통 엄청 큰 수가 나오고 최소 또는 최대를 구하라는 문제가 이분탐색의 유형에 해당된다고 한다. 앞으로는 잘 기억해두어야 겠다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/03/09/Immigration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이중우선순위큐</title>
      <link>http://yunpc.github.io/2021/03/05/Double-Priority-Queue/</link>
      <guid>http://yunpc.github.io/2021/03/05/Double-Priority-Queue/</guid>
      <pubDate>Fri, 05 Mar 2021 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;일반적인 우선순위 큐에서 tail에서도 값이 나올 수 있게 만드는 문제이다. I + (숫자)인 경우 숫자를 삽입하는 것이고 &quot;D 1&quot;인 경우 최댓값을 제거하고, &quot;D -1&quot;이라면 최솟값을 제</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>일반적인 우선순위 큐에서 tail에서도 값이 나올 수 있게 만드는 문제이다. I + (숫자)인 경우 숫자를 삽입하는 것이고 "D 1"인 경우 최댓값을 제거하고, "D -1"이라면 최솟값을 제거한다. 이런 명령어들이 담긴 배열을 전부 수행하였을 때, 큐에 남은 최댓값과 최솟값을 배열로 담아 반환하면 된다. <span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDI2Mjg=">문제링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublePriorityQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//프로그래머스 문제풀이 level3 이중 우선순위 큐</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PriorityQueue&lt;Integer&gt; big;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PriorityQueue&lt;Integer&gt; small;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; big_map;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; small_map;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] operations = &#123;<span class="string">&quot;I 16&quot;</span>, <span class="string">&quot;I -5643&quot;</span>, <span class="string">&quot;D -1&quot;</span>, <span class="string">&quot;D 1&quot;</span>, <span class="string">&quot;D 1&quot;</span>, <span class="string">&quot;I 123&quot;</span>, <span class="string">&quot;D -1&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        big = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(Collections.reverseOrder());</span><br><span class="line">        small = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        big_map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        small_map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : operations)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;D 1&quot;</span>) &amp;&amp; !big.isEmpty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> big_i = big.peek();</span><br><span class="line">                big_map.put(big_i, big_map.getOrDefault(big_i, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                big.poll();</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;D -1&quot;</span>) &amp;&amp; !small.isEmpty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> small_i = small.peek();</span><br><span class="line">                small_map.put(small_i, small_map.getOrDefault(small_i, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                small.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.contains(<span class="string">&quot;I&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> i = Integer.parseInt(s.substring(<span class="number">1</span>).trim());</span><br><span class="line">                big.add(i);</span><br><span class="line">                small.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            synchroize();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(big.isEmpty())</span><br><span class="line">            System.out.println(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(big.peek());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(small.isEmpty())</span><br><span class="line">            System.out.println(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(small.peek());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchroize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(big_map.getOrDefault(big.peek(), <span class="number">0</span>) &lt; small_map.getOrDefault(big.peek(), <span class="number">0</span>)</span><br><span class="line">        &amp;&amp; !big.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> big_i = big.peek();</span><br><span class="line">            big_map.put(big_i, big_map.getOrDefault(big_i, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            big.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(big_map.getOrDefault(small.peek(), <span class="number">0</span>) &gt; small_map.getOrDefault(small.peek(), <span class="number">0</span>)</span><br><span class="line">        &amp;&amp; !small.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> small_i = small.peek();</span><br><span class="line">            small_map.put(small_i, small_map.getOrDefault(small_i, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            small.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 가장 쉬운 구현방법을 생각해보면 리스트를 선언하여 연산할 수 있겠지만, 그런 경우 시간이 굉장히 오래걸린다. 그래서 우선순위큐를 활용하여 문제를 풀어보자.</p><p>문제점은 우선순위큐에는 tail이라는 개념이 없는 것이다. 애초에 heap으로 구성이 되어 있으니 최대값만 찾거나 최소값만 찾을 수 있다. 필자는 이를 보완하기 위해 우선순위 큐 두개를 활용하기로 했다.</p><p>여기에 추가로 두 개의 맵을 선언하는데 맵의 역할은 각 큐에서 어느 숫자가 몇 번 삭제 되었는지 기록하는 용도이다. 우선순위 큐를 두개를 사용하였지만, 실제로는 하나의 큐로 인식하기 때문에 이 두 큐에서 한쪽만 원소가 삭제되면 안된다. 따라서 이 두 큐를 동기화하기 위해 사용된다.</p><p>첫 번째 for문을 보자. 일단 최대값을 제거해야 하는 경우 <code>big</code>에서 하나를 제거하고 맵에 삭제된 횟수를 갱신한다. 최솟값을 제거하는 경우도 동일한 원리로 작동한다.</p><p>만약 숫자를 삽입하는 경우라면 두 큐에 모두 삽입한다.</p><p>삭제 또는 추가를 마칠 때 마다, 동기화를 해야하는데 필자는 이를 <code>synchronize</code>라는 함수를 통해 구현하였다. 함수 내부를 들여다보면, 두 개의 while문이 나타나는데, 두 while문은 동작하는 방식이 동일하므로 첫번째 while문에 대해서 이야기하겠다.</p><p><code>big</code>큐의 가장 첫번째 원소가 삭제된 횟수가 <code>small</code>에서 삭제된 횟수보다 작다면, 이는 지워야 하는 원소이므로 제거한다. <code>big</code>이 비어있지 않는 한 계속 반복하면 된다. 이를 통해 두 큐를 동기화 할 수 있다.</p><p><code>operation</code>의 크기를 n이라 하였을 때, 최종 시간복잡도는 <span class="math inline">\(O(nlogn)\)</span>이다. 그거보다 시간복잡도가 높지 않을까 생각하는 분이 계실 수도 있는데, 생각해보면 두 큐에 들어갔다 나오는 횟수를 전부 더하면 <span class="math inline">\(4nlogn\)</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><center><img src="/images/programmers/double_pq.png" width="290" height="130"></center><p><br></p><p>질문하기를 보니까 조건에 부합하지 않게 짜도 통과되는 경우가 있다고 한다. 이 부분에서 좀 더 신경을 써줬으면 좋겠다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/03/05/Double-Priority-Queue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>단속 카메라</title>
      <link>http://yunpc.github.io/2021/03/04/Control-Camera/</link>
      <guid>http://yunpc.github.io/2021/03/04/Control-Camera/</guid>
      <pubDate>Thu, 04 Mar 2021 07:44:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;최대한 많은 overlap을 하나로 묶을 때, 나오는 집합의 크기를 구하는 문제이다. 상세한 설명은 아래에 계속하겠다. &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>최대한 많은 overlap을 하나로 묶을 때, 나오는 집합의 크기를 구하는 문제이다. 상세한 설명은 아래에 계속하겠다. <span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtbWVycy5jby5rci9sZWFybi9jb3Vyc2VzLzMwL2xlc3NvbnMvNDI4ODQ=">문제 링크<i class="fa fa-external-link-alt"></i></span></p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Section</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Section</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Section</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Section sec)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.s - sec.s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedTrap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//프로그래머스 level3 단속카메라</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] routes = &#123;</span><br><span class="line">            &#123;-<span class="number">20</span>, <span class="number">15</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">14</span>, -<span class="number">5</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">18</span>, -<span class="number">13</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">5</span>, -<span class="number">3</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Section&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; routes.length; i++)</span><br><span class="line">            pq.add(<span class="keyword">new</span> Section(routes[i][<span class="number">0</span>], routes[i][<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cam_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> end = pq.peek().e;</span><br><span class="line">            <span class="keyword">while</span>(!pq.isEmpty() &amp;&amp; pq.peek().s &lt;= end)</span><br><span class="line">            &#123;</span><br><span class="line">                end = pq.peek().e &lt; end ? pq.peek().e : end;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            cam_cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(cam_cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 알고리즘의 이해를 돕기 위해 아래의 그림을 보자</p><p><br></p><center><img src="/images/programmers/cam.jpeg" width="1184" height="431"></center><p><br></p><p>프로그래머스에서 주어진 구간을 수평선 상에 표시하였다. 최소한의 카메라를 설치해야한다는 것은 최대한 차가 많이 다닐 것 같은 길목에 카메라를 놓아야 한다는 것이다. 그 말은 구간이 최대한 많이 겹치는 쪽에 카메라를 놓으면 된다는 것이다.</p><p>이를 구현하기 위해서 <code>Section</code>클래스를 선언하였다. 구간의 처음과 끝을 저장해두며, 정렬을 할 때 구간의 시작점을 기준으로 정렬한다.</p><p>우선순위 큐를 선언하여 Section을 집어넣는다. 이 큐에서 하나씩 빼면서 최대한 겹칠 수 있는 구간들을 묶을 것이다. 일단 <code>end</code>를 큐의 첫원소의 도착구간으로 설정한다. 그리고 <code>end</code>보다 출발점이 작은 구간은 무조건 겹치므로 이들을 팝한다. 이 때, 팝한 것들 중에 기존 <code>end</code>보다 작은 종료구간이 있다면 그 값으로 대체한다.</p><p>이 반복이 마치면 더 이상 겹치는 구간이 없다는 의미이므로 하나로 묶는 작업이 끝난 것이다. 카메라를 설치한다는 의미로 <code>cam_cnt</code>를 1가한다.</p><p>우선순위 큐를 사용하였기 때문에 구간의 개수를 n이라 하였을 때, 최종 시간복잡도는 <span class="math inline">\(O(nlogn)\)</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><center><img src="/images/programmers/camera.png" width="290" height="130"></center><p><br></p><p>학교 수업에서 해봤던 문제라 수월하게 풀 수 있었다. 앞으로 나만의 코테 데이터베이스를 더 쌓아나가야지.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/03/04/Control-Camera/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>디스크 컨트롤러</title>
      <link>http://yunpc.github.io/2021/03/04/Disk-Controller/</link>
      <guid>http://yunpc.github.io/2021/03/04/Disk-Controller/</guid>
      <pubDate>Thu, 04 Mar 2021 06:26:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;SJF(Shortest Job First)를 구현하는 문제이다.&lt;/p&gt;
&lt;h2 id=&quot;문제풀이&quot;&gt;문제풀이&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;전체 코드는 다음과 같다. &lt;figure class=&quot;hi</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제정의">문제정의</h2><hr /><p>SJF(Shortest Job First)를 구현하는 문제이다.</p><h2 id="문제풀이">문제풀이</h2><hr /><p>전체 코드는 다음과 같다. <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Job</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> request_time;</span><br><span class="line">    <span class="keyword">int</span> service_time;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(<span class="keyword">int</span> request_time, <span class="keyword">int</span> service_time)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.request_time = request_time;</span><br><span class="line">        <span class="keyword">this</span>.service_time = service_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Job j)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.service_time - j.service_time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//프로그래머스 문제풀이 level3 디스크 컨트롤러</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] jobs = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">            &#123;<span class="number">500</span>, <span class="number">6</span>&#125;,</span><br><span class="line">            <span class="comment">// &#123;0, 7&#125;,</span></span><br><span class="line">            <span class="comment">// &#123;0, 3&#125;,</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(jobs, (a,b) -&gt; Integer.compare(a[<span class="number">0</span>], b[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        Queue&lt;Job&gt; prepare_q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jobs.length; i++)</span><br><span class="line">            prepare_q.add(<span class="keyword">new</span> Job(jobs[i][<span class="number">0</span>], jobs[i][<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Job&gt; ready_q = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> time = jobs[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> total_t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> done = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(done != jobs.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!prepare_q.isEmpty() &amp;&amp; prepare_q.peek().request_time &lt;= time)</span><br><span class="line">                ready_q.add(prepare_q.poll());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!ready_q.isEmpty())</span><br><span class="line">            &#123;</span><br><span class="line">                Job job = ready_q.poll();</span><br><span class="line">                time += job.service_time;</span><br><span class="line">                total_t += time - job.request_time;</span><br><span class="line">                done++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                time = prepare_q.peek().request_time;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        System.out.println((<span class="keyword">int</span>)Math.floor(total_t/done));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 작업을 나타내기 위한 클래스를 먼저 정의한다. 문제에서 주어진 입력대로 클래스의 인스턴스 변수는 <code>request_time</code>과 <code>service_time</code>이다. 여기서 비교 클래스를 상속받아 메소드를 오버라이딩 해주는데 인스턴스들을 정렬할 경우 <code>service_time</code>이 오름차순이 되도록 한다.</p><p>주어진 입력은 요청시간 순대로 들어오지 않으므로 이에 대해 람다식으로 정렬을 해주는 것이 우선이다. 람다식을 이용해 정렬한다.</p><p>정렬한 배열을 <code>prepare_q</code>에 전부 넣는다. 실은 여기서 개인의 취향대로 여기서도 우선순위 큐를 활용해도 된다. 이 큐는 처리되길 기다리는 작업들을 모아둔 것이라고 보면 된다.</p><p>이제 작업을 순차적으로 처리해야 한다. 초기 <code>time</code>을 첫번째 요청시간으로 초기화한다. <code>total_t</code>는 총 반환시간을 의미하며, <code>done</code>은 종료된 작업의 개수를 뜻한다.</p><p>반복은 모든 작업이 완료될 때 까지로 한다. 준비 큐(<code>prepare_q</code>)가 비어있지 않을 때, time보다 작거나 같은 요청시간을 가진 작업들을 모두 빼와 대기 큐(<code>ready_q</code>)에 집어넣는다. 이 때 대기 큐에 하나라도 들어가 있다면, 들어온 것 중에서 가장 작은 서비스시간을 가진 것을 꺼낸다. 그리고 <code>time</code>에는 서비스 시간을 더하고 <code>total_t</code>에 <code>time-(요청 시간)</code>을 더해준다. 그리고 <code>done</code>을 1증가한다. 만약에 대기 큐가 비어있다면 준비큐의 맨 앞의 요청시간을 <code>time</code>으로 갱신한다.</p><p>정렬을 사용하였기 때문에 작업의 개수를 n이라 하였을 때, 최종 시간복잡도는 <span class="math inline">\(O(nlogn)\)</span>이다.</p><h2 id="테스트">테스트</h2><p><br></p><center><img src="/images/programmers/disk_controller.png" width="290" height="130"></center><p><br></p><p>처음에는 우선순위큐를 이용하지 않고 dfs에서 방문기록을 남겼던 것 처럼, 배열을 정렬하고 방문기록을 활용하여 똑같은 논리로 짰었는데 계속 틀렸다. 어제 몇 시간을 고민하다. 결국 다 지우고 우선순위 큐로 구현하였더니 통과가 되었다. 그 전 코드의 문제점이 뭔지 알았으면 좋았을텐데, 앞으로 공부를 하면서 꼬인 논리를 지금 보다 더 능숙하게 풀어냈으면 좋겠다.</p>]]></content:encoded>
      
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/">Problem Solving</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/">Programmers</category>
      
      <category domain="http://yunpc.github.io/categories/Problem-Solving/Programmers/Level3/">Level3</category>
      
      
      
      <comments>http://yunpc.github.io/2021/03/04/Disk-Controller/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
